'************************************************************************
'Copyright (c) 2016 - OpenMotics <info@openmotics.com>

'This file is part of OpenMotics.

'OpenMotics is free software: you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation, either version 3 of the License, or
'(at your option) any later version.

'OpenMotics is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.

'You should have received a copy of the GNU General Public License
'along with OpenMotics.  If not, see <http://www.gnu.org/licenses/>.
'************************************************************************

'Firmware to be used with the OpenMotics 8 ports output (Relay) Module

'Written in Pic Basic Pro 2.6 however it should be compatible with Pic Basic Pro 3.0 but this is not yet tested
'Interrupt system of Darrel Taylor is used see http://darreltaylor.com/DT_INTS-18/home.html
'For more information see wiki.openmotics.com

@ CONFIG SOSCSEL=DIG

DEFINE OSC 40

version con 3
firmware con 0
built con 9

DEFINE  USE_LOWPRIORITY  1
INCLUDE "DT_INTS-18.bas"       ; Base Interrupt System
INCLUDE "ReEnterPBP-18.bas"    ; Include if using PBP interrupts
INCLUDE "ReEnterPBP-18LP.bas"  ; Include if using Low Pr. PBP INTS

'OSCCON.0=0 'external oscillator
'OSCCON.1=0
'OSCTUNE.6=1 'PLL enabled

ANCON0=%00000000   'All ports configured as digital ports
ANCON1=%00000000   'All ports configured as digital ports

CCP2CON=0

pause 400  
hardware var byte
if PORTA.1=0 and PORTA.2=0 then
  hardware=3
endif  
if PORTA.1=0 and PORTA.2=1 then
  hardware=4
endif 
if PORTA.1=1 and PORTA.2=0 then
  hardware=5
endif 
if PORTA.1=1 and PORTA.2=1 then
  hardware=6
endif

'Hardware addressing ----------------------------------------------------------
RS485_mode var    PORTD.4        ' Mode for RS485 chip (send or receive)
input PORTC.7
output PORTC.6
LED_red    VAR  PORTE.1   ' Led
LED_logo   var  PORTA.3
sda        var  PORTC.4
scl        var  PORTC.3
Button1    var  PORTB.1
Button1_2  var  PORTA.5   'HW V4
Button2    var  PORTB.0
Button2_2  var  PORTE.0   'HW V4
Relay1On   var  PORTC.5
Relay1Off  var  PORTD.3
Relay2On   var  PORTD.2
Relay2Off  var  PORTD.1
Relay3On   var  PORTD.0
Relay3Off  var  PORTC.2
Relay4On   var  PORTC.1
Relay4Off  var  PORTC.0
Relay8On   var  PORTD.6
Relay8On_2 var  PORTB.0   'HW V4
Relay8Off  var  PORTD.5 
Relay7On   var  PORTD.7
Relay7On_2 var  PORTB.1   'HW V4
Relay7Off  var  PORTB.2
Relay6On   var  PORTB.3
Relay6Off  var  PORTA.0
Relay5On   var  PORTB.4
Relay5Off  var  PORTB.5

LED_Pwr    var  PORTE.2
Low LED_Pwr

if hardware=3 then
  input Button1
  input Button2
  output Relay7On
  output Relay8On
else
  input Button1_2
  input Button2_2
  output Relay7On_2
  output Relay8On_2
endif

output RS485_mode
input sda
input scl
output Relay1On
output Relay1Off
output Relay2On
output Relay2Off
output Relay3On
output Relay3Off
output Relay4On
output Relay4Off
output Relay5On
output Relay5Off
output Relay6On
output Relay6Off
output Relay7Off
output Relay8Off


'i2c --------------------------------------------------------------------------
SSPADD.0=1  '100kHz
SSPADD.1=1
SSPADD.2=0
SSPADD.3=0
SSPADD.4=0
SSPADD.5=1
SSPADD.6=1
SSPCON1=%00101000 'turn on MSSP and set for master mode i2c 

'uart--------------------------------------------------------------------------
low RS485_mode
'BAUDCON1 = %01001000
BAUDCON1.5=0 'receive data is not inverted
BAUDCON1.3=1 'BRG16=1
BAUDCON1.4=0 'idle state for Txd is 1
SPBRGH1 = 0  '115200 baud
SPBRG1 = 86
RCSTA1 = %00010000
TXSTA1 = %00000100

Mod_ID0 var     byte
Mod_ID1 var     byte
Mod_ID2 var     byte
Mod_ID3 var     byte
Mod_NE  var     byte        'N->New module,E->Existing module

'Variables

test_bit var bit
x  var byte
y  var byte
q  var byte
s  var byte
u  var byte
r  var byte
w  var byte
s1 var byte
s2 var byte
i  var byte
w1 var word
tmp  var byte[8]
test var byte
reset_count var byte
reset_count=0
Out var byte
OutOld var byte
OutChanged var byte
OutUpdateAll var bit
OutUpdateAll=1
OutAlert var byte
OutAlertCounter var word
OutAlertUpdate var bit
OutAlertOn var bit
OutAlert=0
OutAlertCounter=0
OutAlertUpdate=0
OutAlertOn=0
timer var byte
timer=0
indicate var byte
Button1Pressed var bit
Button1Pressed=0
Button1Timer var word
Butt1 var bit
Butt2 var bit
RndValue var byte

RelayTimer var bit
RelayTimerOn  var byte[8]
RelayTimerOff var byte[8]
for i=0 to 7
  RelayTimerOn[i]=255
  RelayTimerOff[i]=255
next i

i2ccont var byte     'chip address
i2caddr var byte     'address within the chip to select data
i2cdata var byte     'data to read or write
i2cdataTemp var byte
i2cMode var byte
i2cAck var bit
i2cInt var bit
i2cMode=0
i2cInt=0
i2creadbit var bit
i2cClock var bit
i2cClock=0
pcf8574 var bit
eep_addr var word
eep_addr_temp var word
err var byte
mode var byte
mode="L"

Buffer con 180
StackSer1 var byte[buffer]
RecSer1 var bit   '=1 in receiving mode
RecSerTemp1 var byte
RecSerTemp2 var byte
PointerSer1 var byte
InterpreteSer1 var bit
RecSer1=0
PointerSer1=0
InterpreteSer1=0
ReceiveTemp var byte
broadcast var bit
counter var byte
PortOld var byte[3]
CRC var word

i2cData0 var byte
i2cData1 var byte
i2cData2 var byte
i2cMode=0
i2cInt=0

LedCounter var byte
LedCounter=0
LedAction var bit
LedAction=0
RelayCounter var byte
RelayCounter=0
RelayAction var bit
RelayAction=0
OutDelay var bit[4]

PowerSafe var bit
ButtonLedsOn var bit
ButtonLedsOn=1      'after startup, leds on for a short period of time
PowerSafe=0         'Module not in PowerSafe Mode (Leds on)
ButtonTimer var byte
ButtonTimer=0

gosub AllRelaysOff

'Define interrupts

;----[High Priority Interrupts]-----------------------------------------------
ASM
INT_LIST  macro    ; IntSource,        Label,  Type, ResetFlag?
        INT_Handler     RX1_INT,     _Receive1,    PBP,  no 
    endm
    INT_CREATE               ; Creates the High Priority interrupt processor

;----[Low Priority Interrupts]------------------------------------------------
INT_LIST_L  macro  ; IntSource,        Label,  Type, ResetFlag?
        INT_Handler     TMR0_INT,    _Timer0,      PBP,  yes       
        INT_Handler     TMR2_INT,    _Timer2,      PBP,  yes 
        INT_Handler     SSP_INT,     _SSP,         PBP,  no 
    endm
    INT_CREATE_L             ; Creates the Low Priority interrupt processor
ENDASM

T0CON=%10000001               ; T0 = 16-bit, 1:4 Prescaler
T2CON=%01111111

@    INT_ENABLE  RX1_INT       ; Enable USART Receive interrupts
@    INT_ENABLE  TMR0_INT      ; enable Timer 0 interrupts
@    INT_ENABLE  TMR2_INT      ; enable Timer 2 interrupts
@    INT_ENABLE  SSP_INT

TMR0L=0     'reset value
TMR0H=0
T0CON.7=1   'timer 0 enabled
PIE1.1=1    'timer 2 interrupt enabled
T2CON.2=1   'start timer2
PIE1.3=1    'enable SSP interrupt
INTCON.6=1
INTCON.7=1
RCSTA1.7=1  'Enable UART1
RCSTA1.4=0  'disable UART1 receiver
PIE1.5=1    'Enable receive UART1 interrupt
PIR1.5=0    'Clear RC1IF
RCSTA1.4=1  'disable UART1 receiver
TXSTA1.5=1  'enable UART1 transmit

'To be used for debugging
BAUDCON2.5=0 'receive data is not inverted
BAUDCON2.3=1 'BRG16=1
BAUDCON2.4=0 'idle state for Txd is 1
SPBRGH2 = 0  '115200 baud
SPBRG2 = 86
RCSTA2 = %00010000
TXSTA2 = %00000100
pause 400
RCSTA2.7=1  'Enable UART2
RCSTA2.4=0  'disable UART2 receiver
RCSTA2.4=1  'disable UART2 receiver
TXSTA2.5=1  'enable UART2 transmit

gosub check_startupreset  'check if reset 

read 0,Mod_NE        'Mode_ID in eeprom controller
read 1,Mod_ID0
read 2,Mod_ID1
read 3,Mod_ID2
read 4,Mod_ID3

if Mod_ID0<>"O" and Mod_ID0<>"R" then   'Module not configured is standard and Output module
  Mod_ID0 = "O"                         '"O"-> Output Module, "R"-> Restricted Output for curtains for example
endif

PCF8574_ADDRESS  con %01000000
PCF8574A_ADDRESS con %01110000
PCF8574i2ccont var byte
PCF8574i2ccont=PCF8574_ADDRESS
i2cdata=255
gosub write_pcf8574
if err=1 then 
  PCF8574i2ccont=PCF8574A_ADDRESS  'if i2c address is not correct, take the other address
  i2cdata=255
  gosub write_pcf8574
endif 

'bootloader, see http://wiki.openmotics.com/index.php/Bootloader
read 64,x    'Read Hardware version
if x<>hardware then 
  write 64,hardware
endif
read 65,x    'Read Major firmware version
if x<>version then 
  write 65,version
endif
read 66,x    'Read Minor firmware version
if x<>firmware then 
  write 66,firmware
endif
read 67,x    'Read Minor firmware version
if x<>built then 
  write 67,built
endif 
read 74,x    'Read Flashmode variable and put on 0 so the bootloader knows the app is running
if x<>0 then 
  write 74,0
endif
write 75,0    'Set Bootloader time on 0 seconds 

high led_logo

hserout2 ["Startup done",13,10]

'----------------------------------------------------------------------------
' Main routine
'----------------------------------------------------------------------------

mainloop:
  gosub interprete_serial    'check information coming from the RS485 bus
  gosub check_LedAction      'Set leds correctly
  gosub check_RelayAction    'When a Relay coil is activated, switch off after +/-40ms
  gosub Display_AlertLeds    'Check if any leds needs to flash, normal or inverted state
  gosub check_SerialErrors   'Check if serial errors happened
  gosub check_inputs2        'check if top button is pressed
  if mode="I" then           'bus is in Initialization mode
    gosub check_inputs       'during initialization, 2 inputs needs to be checked
  endif
  gosub Check_Relais
  gosub Relais_On_off        'Switch on/off relays
Goto mainloop

'--------------------------------------------------------------------------
' Interrupt routines
'--------------------------------------------------------------------------

Receive1:                  'RS485 receive routine
  recsertemp1=recsertemp2  'Keep previous character also
  recsertemp2=RCREG1
  if recser1=1 then        'Receiving?
    StackSer1[PointerSer1]=recsertemp2
    ReceiveTemp=pointerser1-1
    if stackser1[ReceiveTemp]=13 and stackser1[pointerser1]=10 then
      RCSTA1.4=0           'disable receiving serial 1
      RecSer1=0            'stop receiving ser1 and buffering
      InterpreteSer1=1
    endif
    pointerser1=pointerser1+1
    if pointerser1>(Buffer-2) then  'Buffer overflow -> stop receiving and interprete
      RCSTA1.4=0           'disable receiving serial 1
      RecSer1=0            'stop receiving ser1 and buffering
      InterpreteSer1=1
    endif  
  else                     'Not in receiving mode
    if recsertemp1="S" and recsertemp2="T" then
      Pointerser1=0
      recser1=1            'start receiving ser1
    endif
  endif
  RCSTA1.4=1  'enable UART1 receiver
@ INT_RETURN

Timer0:    'interrupt after 26ms when i2c is active
     T0CON.7=0  'timer 0 disabled
     INTCON.2=0 'interrupt flag cleared
     i2cmode=0  'stop
     err=1      'error
@ INT_RETURN

Timer2:   'interrupt every 6,5ms  
  T2CON.2=0
  PIR1.1=0   'clear timer2 interrupt flag 
  timer=timer+1
  if timer=20 then 
    high led_logo
    OutAlertOn=0
    if OutAlertCounter>0 then OutAlertUpdate=1
  endif  
  if timer>249 then
    timer=0
    low led_logo
    OutAlertOn=1
    if OutAlertCounter>0 then OutAlertUpdate=1
    ButtonTimer=ButtonTimer+1
    if ButtonTimer>5 and ButtonLedsOn=1 then
      PowerSafe=1    'Led off again
      ButtonLedsOn=0
      OutalertUpdate=1        
    endif
  endif 
  if LedCounter>0 then 
    LedCounter=LedCounter-1
    if LedCounter=0 then LedAction=1
  endif  
  if RelayCounter>0 then 
    RelayCounter=RelayCounter-1
    if RelayCounter=0 then RelayAction=1
  endif 
  if outalertcounter>0 then OutAlertCounter=Outalertcounter-1
  if Button1Pressed=1 and Button1Timer>0 then Button1Timer=Button1Timer-1
  RndValue=RndValue+1
  RelayTimer=1   
  T2CON.2=1
@ INT_RETURN

SSP:
  PIE1.3=0   'disable interrupt
  i2cMode=i2cMode+1
  i2cInt=1
  PIR1.3=0   'clear interrupt flag
  PIE1.3=1   'enable interrupt  
@ INT_RETURN

'---------------------------------------------------------------------------
' RS485 routines
'---------------------------------------------------------------------------

Interprete_Serial: 'Interprete data coming from the RS485 bus
  if InterpreteSer1=1 then
    RCSTA1.4=0               'disable receiving serial 1  
    InterpreteSer1=0
    if pointerser1>15 then   
      if stackser1[0]="O" or stackser1[0]="R" then  'output module or Curtain module (Restricted) addressed
        gosub Check_Output_Module  
      elseif stackser1[0]=0 and stackser1[1]=0 and stackser1[2]=0 and stackser1[3]=0 then    'Broadcast message
         if stackser1[4]="L" and stackser1[5]="L" then   'Bus in Live mode
           if mode="I" then 
             high led_red
           endif  
           mode="L"
         endif
         if stackser1[4]="I" and stackser1[5]="I" then   'Bus in Initialize mode
           'gosub generate_id
           if mode="L" then 
             low led_red
           endif
           mode="I"
         endif
         if stackser1[4]="N" and stackser1[5]="N" then   'Module in Normal state (Leds on)
           PowerSafe=0
           OutAlertUpdate=1
         endif 
         if stackser1[4]="S" and stackser1[5]="S" then   'Module in Power Safe state (Leds off)
           PowerSafe=1
           OutAlertUpdate=1
         endif
         'testmode 
         if stackser1[4]="T" and stackser1[5]="M" then   'Instruction only requested in Test Mode
           indicate=255
           Powersafe=0
           toggle led_red
           Gosub Test_instructions
         endif                          
      elseif mode="I" and stackser1[0]="A" and stackser1[1]="D" then   'activate device
         gosub activate_device
      endif
    endif
    pointerser1=0
    RCSTA1.4=1            'enable receiving serial 1
  endif
return

Check_Button:
  if hardware=3 then   'Depending on the Hardware version, take other pins to read
    Butt1=Button1
    Butt2=Button2
  else
    Butt1=Button1_2
    Butt2=Button2_2    
  endif
return

'testmode
Test_instructions:
  if stackser1[6]="V" then  'Firmware version
    high RS485_mode     'send mode
    hserout ["AAARC",0,0,0,0,"V",Mod_ID0,hardware,version,firmware,built,13,10,13,10]
    low RS485_mode      'receive mode
  elseif stackser1[6]="S" then  'Set Ports
    out=0
    for i=0 to 7
      if stackser1[7+i]>0 then   'port 7..0
         x=%10000000>>i
         out=out|x
      endif
    next i  
    gosub write_output
  elseif stackser1[6]="B" then  'Provide Button state
    gosub check_Button
    high RS485_mode     'send mode
    if stackser1[7]=1 then
      hserout ["AAARC",0,0,0,0,"B",1,Butt1,13,10,13,10]
    endif
    if stackser1[7]=2 then
      hserout ["AAARC",0,0,0,0,"B",2,Butt2,13,10,13,10]    
    endif  
    low RS485_mode      'receive mode                                
  endif
return

check_SerialErrors:
  if RCSTA1.2=1 then  'frame error bit
    x=RCREG1
  endif
  if RCSTA1.1=1 then  'Overrun Error bit
    RCSTA1.4=0    'disable receiver
    pause 2
    RCSTA1.4=1    'enable receiver
  endif
return

Check_output_module:
  if stackser1[0]=Mod_id0 and stackser1[1]=Mod_id1 and stackser1[2]=Mod_id2 and stackser1[3]=Mod_id3 then
    'bootloader
    if stackser1[4]="F" and stackser1[5]="V" then      'Request Firmware Version
      s1="V"
      gosub send_F_response
    elseif stackser1[4]="F" and stackser1[5]="R" then  'Perform Reset of the module
      write 75,stackser1[6]                            'Write number of seconds that this module must remain in bootloader mode
      s1="R"
      gosub send_F_response
      pause 5
      asm
        reset
      endasm  
    
    else
      CRC=stackser1[4]+stackser1[5]+stackser1[6]+stackser1[7]+stackser1[8]+stackser1[9]+stackser1[10]+stackser1[11]+stackser1[12]+stackser1[13]
      if stackser1[14]="C" and stackser1[15]=CRC.byte1 and stackser1[16]=CRC.byte0 then
        out=stackser1[4]
        indicate=Stackser1[5]
        gosub write_output
        s1="K"
        s2=out
        gosub rs485_send
      endif
    endif
  endif          
return

'bootloader
send_F_response:
  high RS485_mode 'send mode
  if s1="V" then  'Firmware version
    CRC=Mod_id0+Mod_id1+Mod_id2+Mod_id3+"F"+"V"+255+hardware+version+firmware+built
    hserout ["AAARC",Mod_id0,Mod_id1,Mod_id2,Mod_id3,"F","V",255,hardware,version,firmware,built,0,"C",CRC.byte1,CRC.byte0,13,10,13,10]
    hserout ["AAARC",Mod_id0,Mod_id1,Mod_id2,Mod_id3,"F","V",255,hardware,version,firmware,built,0,"C",CRC.byte1,CRC.byte0,13,10,13,10]
    low RS485_mode  'Receive mode
    'hserout2 ["Firmware V instruction",13,10]
  else            'Reset
    CRC=Mod_id0+Mod_id1+Mod_id2+Mod_id3+"F"+"R"+255
    hserout ["AAARC",Mod_id0,Mod_id1,Mod_id2,Mod_id3,"F","R",255,"C",CRC.byte1,CRC.byte0,13,10,13,10]
    hserout ["AAARC",Mod_id0,Mod_id1,Mod_id2,Mod_id3,"F","R",255,"C",CRC.byte1,CRC.byte0,13,10,13,10]
    low RS485_mode  'Receive mode
    'Hserout2 ["Firmware R instruction ",dec stackser1[6],13,10]
  endif
  low RS485_mode  'Receive mode
return

Display_AlertLeds:
  if OutalertUpdate=1 then 'Led needs to be updated
    OutAlertUpdate=0
    if OutAlertOn=0 then 'Normal led condition
      x=~out
      gosub set_leds
      gosub write_pcf8574 
    else                 'Inverted led condition
      y=out^OutAlert
      x=~y
      gosub set_leds
      gosub write_pcf8574
    endif
  endif
return

set_leds:
  if PowerSafe=1 then  'Module is in power safe mode
    x=255              'switch off leds
  endif   
  i2cdata=x
return

Check_Relais:
  if RelayTimer=1 then
    RelayTimer=0
    for i=0 to 7
      if RelayTimerOn[i]>0 and RelayTimerOn[i]<255 then
        RelayTimerOn[i]=RelayTimerOn[i]-1
      endif 
      if RelayTimerOff[i]>0 and RelayTimerOff[i]<255 then
        RelayTimerOff[i]=RelayTimerOff[i]-1
      endif 
    next i
  endif
return

Relais_On_Off:
  if RelayTimerOn[0]=0 then  'Relay 0 can be switched on
    high Relay1On
    low Relay1Off 
    RelayTimerOn[0]=255
    RelayCounter=6
  elseif RelayTimerOff[0]=0 then  'Relay 0 can be switched off
    high Relay1Off
    low Relay1On 
    RelayTimerOff[0]=255
    RelayCounter=6  
  endif    
  if RelayTimerOn[1]=0 then  'Relay 1 can be switched on
    high Relay2On
    low Relay2Off
    RelayTimerOn[1]=255
    RelayCounter=6
  elseif RelayTimerOff[1]=0 then  'Relay 1 can be switched off
    high Relay2Off
    low Relay2On 
    RelayTimerOff[1]=255
    RelayCounter=6  
  endif        
  if RelayTimerOn[2]=0 then  'Relay 2 can be switched on
    high Relay3On
    low Relay3Off 
    RelayTimerOn[2]=255
    RelayCounter=6 
  elseif RelayTimerOff[2]=0 then  'Relay 2 can be switched off
    high Relay3Off
    low Relay3On 
    RelayTimerOff[2]=255
    RelayCounter=6       
  endif
  if RelayTimerOn[3]=0 then  'Relay 3 can be switched on
    high Relay4On
    low Relay4Off 
    RelayTimerOn[3]=255
    RelayCounter=6
  elseif RelayTimerOff[3]=0 then  'Relay 3 can be switched off
    high Relay4Off
    low Relay4On 
    RelayTimerOff[3]=255
    RelayCounter=6        
  endif
  if RelayTimerOn[4]=0 then  'Relay 4 can be switched on
    high Relay5On
    low Relay5Off 
    RelayTimerOn[4]=255
    RelayCounter=6
  elseif RelayTimerOff[4]=0 then  'Relay 4 can be switched off
    high Relay5Off
    low Relay5On 
    RelayTimerOff[4]=255
    RelayCounter=6         
  endif
  if RelayTimerOn[5]=0 then  'Relay 5 can be switched on
    high Relay6On
    low Relay6Off 
    RelayTimerOn[5]=255
    RelayCounter=6
  elseif RelayTimerOff[5]=0 then  'Relay 5 can be switched off
    high Relay6Off
    low Relay6On 
    RelayTimerOff[5]=255
    RelayCounter=6  
  endif       
  if RelayTimerOn[6]=0 then  'Relay 6 can be switched on
    low Relay7Off
    if hardware=3 then
      high Relay7On
    else
      high Relay7On_2
    endif 
    RelayTimerOn[6]=255
    RelayCounter=6
  elseif RelayTimerOff[6]=0 then  'Relay 6 can be switched off
    high Relay7Off
    if hardware=3 then
      low Relay7On
    else
      low Relay7On_2
    endif   
    RelayTimerOff[6]=255
    RelayCounter=6        
  endif
  if RelayTimerOn[7]=0 then  'Relay 7 can be switched on
    if hardware=3 then
      high Relay8On
    else
      high Relay8On_2
    endif  
    low Relay8Off
    RelayTimerOn[7]=255
    RelayCounter=6
  elseif RelayTimerOff[7]=0 then  'Relay 7 can be switched off
    high Relay8Off
    if hardware=3 then
      low Relay8On
    else
      low Relay8On_2
    endif   
    RelayTimerOff[7]=255
    RelayCounter=6  
  endif                         
Return

check_out:     
  if Mod_ID0="R" then  'check, when in module in R mode that no conflicting Relays can be switched on
    for r=0 to 3
       OutDelay[r]=0  
       u=%00000011<<(r*2)
       u=out&u
       u=u>>(r*2)
       if u=3 then 'Both outputs are ON
         w=outchanged>>(r*2)
         OutDelay[r]=1    'switch output ON with a delay so outputs are off before switching ON the other output
         if w.bit0=1 then
           s=%00000001<<((r*2)+1)
           outchanged=outchanged|s
           s=~s
           out=out&s
         else
           s=%00000001<<(r*2)
           outchanged=outchanged|s           
           s=~s
           out=out&s        
         endif
       endif
    next r
  endif
return

write_output:
  outchanged=OutOld^Out    'check which outputs have been changed
  gosub check_out
  x=~out
  gosub set_leds
  gosub write_pcf8574
  for i=0 to 7              'Check all outputs
    x=outchanged>>i
    y=out>>i
    if x.bit0=1 then        'output changed?
      if y.bit0=1 then      'output on or off?
        if Mod_ID0="R" then 'switch on with delay off 650ms when it is a Curtain module
          if OutDelay[i/2]=1 then  'switch Output ON with a delay?
            RelayTimerOn[i]=100 
          else 
            RelayTimerOn[i]=0 
          endif
        else 
          RelayTimerOn[i]=0  
        endif   
      else
        RelayTimerOff[i]=0  'switch off without delay
      endif
    endif    
  next i
  Outold=out
  if indicate<8 then
    OutAlert=%00000001<<indicate
    OutAlertCounter=3077 '20 seconden
  endif
return

generate_ID:
if Mod_NE<>"E" then   'Not yet a unique code
  Mod_NE="N"
  for q=0 to 2
    random w1                              'generate random ID
    'if w1.byte0<>255 and w1.byte0<>0 then  'Random value if ok
      tmp[q]=w1.byte0+RndValue
    'else                                   'Random value is not ok
    '  tmp[q]=171+q                         'Random value (My bithday :))
    'endif
  next q
  Mod_ID1=tmp[0]
  Mod_ID2=tmp[1]
  Mod_ID3=tmp[2]
endif
return

check_startupreset:
  for s=0 to 40
    gosub check_Button    
    if Butt1=0 then test=1 
    if Butt1=1 then s=40 : test=0  'button not pressed long enough         
    pause 50
  next s
  if test>0 then
    write 0,255        'Mode_ID in eeprom controller
    write 1,255
    write 2,255
    write 3,255
    write 4,255
    for s=0 to 3
      low led_red
      pause 100
      high led_red
      pause 100 
    next s 
  endif    
return

check_inputs: 'during initialization, inputs needs to be checked
  gosub check_Button
  if Butt1=0 then    'initialization button is pressed
    if reset_count=0 then   'Message is sent for the first time
      gosub Generate_ID
      reset_count=5
      s1=0
      s2=Mod_NE   'E->existing,N->New
      gosub rs485_send
    endif
  else           'initialization button is not pressed
    if reset_count>0 then reset_count=reset_count-1     
  endif
return

check_inputs2:
  gosub check_Button
  if Butt2=0 and powersafe=1 then    'Top button is pressed
    ButtonLedsOn=1
    ButtonTimer=0
    PowerSafe=0
    OutalertUpdate=1    
  endif
  if Butt1=0 then                    'Init button pressed
    Button1Pressed=1
    if Button1Timer=0 then             'pressed for around 5 seconds
      gosub Module_type_change
    endif
  else                                 'Init Button not pressed
    Button1Pressed=0
    Button1Timer=750
  endif
return

Module_type_change:
  if Mod_ID0="O" then 
    Mod_ID0="R"
  else
    Mod_ID0="O"
  endif
  write 1,Mod_ID0   'Save new module type in eeprom
  for i=0 to 9
    if Mod_ID0="O" then   'output module
      i2cdata=0
    else                  'Restricted Output module (for curtains and orthers)
      i2cdata=170
    endif  
    gosub write_pcf8574
    pause 300
    i2cdata=255
    gosub write_pcf8574
    pause 300
  next i  
  OutalertUpdate=1   'Set leds back in normal state      
return

rs485_send:
  if mode="L" then 
    low led_red
    LedAction=0
    Ledcounter=20
  endif  
  pauseus 1350
  high RS485_mode     'send mode
  hserout ["AAARC",Mod_ID0,Mod_ID1,Mod_ID2,Mod_ID3,s1,s2,13,10,13,10]
  low RS485_mode      'receive mode 
return

Check_LedAction:
  if LedAction=1 and mode="L" then
    high led_red
    LedAction=0
    Ledcounter=0
  endif
return

Check_RelayAction:
  if RelayAction=1 then
    gosub AllRelaysOff     'put all Relay Coils in an off state 
    RelayAction=0
    RelayCounter=0
  endif
return

activate_device:
  if Mod_NE="N" and stackser1[2]=Mod_ID0 and stackser1[3]=Mod_ID1 and stackser1[4]=Mod_ID2 and stackser1[5]=Mod_ID3 then 'received ID is the new 
    Mod_NE="E"
    write 0,Mod_NE        'Mode_ID in eeprom controller
    write 1,Mod_ID0
    write 2,Mod_ID1
    write 3,Mod_ID2
    write 4,Mod_ID3       
  endif  
return

AllRelaysOff:
  low Relay1On
  low Relay1Off
  low Relay2On
  low Relay2Off
  low Relay3On
  low Relay3Off
  low Relay4On
  low Relay4Off
  low Relay5On
  low Relay5Off
  low Relay6On
  low Relay6Off
  low Relay7Off
  low Relay8Off
  if hardware=3 then
    low Relay7On
    low Relay8On
  else
    low Relay7On_2
    low Relay8On_2
  endif
return

'------------------------------------------------------------------------------
' I2C subroutines
'------------------------------------------------------------------------------

write_eeprom: 
  i2ccont = %10100000
  i2cClock=0
  gosub i2c_write
return

read_eeprom:
  i2ccont = %10100001
  i2cClock=0  
return

write_i2c_2:
  i2ccont=%11010000
  i2cClock=1
  eep_addr.byte1=i2caddr
  gosub i2c_write
return

read_i2c_2:
  i2ccont=%11010001
  i2cClock=1
  eep_addr.byte1=i2caddr
  gosub i2c_read 
return

check_i2c_acknowledge:
  if SSPCON2.6=0 then 'Acknowledge received from slave
    i2cAck=1 'Acknowledge received
    SSPCON2.6=1
  else
    i2cAck=0
  endif 
return

write_pcf8574:
  i2ccont=PCF8574i2ccont
  i2cClock=1
  pcf8574=1
  gosub i2c_write
return

i2c_read:
  if i2ccont.bit0=0 then 'r/w bit is wrong, correct
    i2ccont.bit0=1
  endif
  i2creadbit=1
  i2cint=1
  i2cmode=1
  TMR0L=0
  TMR0H=0
  T0CON.7=1  'timer 0 enabled
  gosub i2c_routine_read
return

i2c_write:
  if i2ccont.bit0=1 then 'r/w bit is wrong, correct
    i2ccont.bit0=0
  endif
  i2creadbit=0
  i2cint=1
  i2cmode=1
  TMR0L=0
  TMR0H=0  
  T0CON.7=1  'timer 0 enabled                    
  gosub i2c_routine_write  
return

i2c_routine_write:
  while (i2cMode>0) 
    if i2cInt=1 then   'i2c chip is ready for next instruction
      i2cInt=0  
      gosub i2cPhase1    
      if i2cMode=5 then 'check acknowledge and send data   
        gosub check_i2c_acknowledge
        if i2cAck=1 then
          SSPBUF=i2cData
        endif  
      endif
      if i2cMode=6 then 'check acknowledge and sent stop   
        gosub check_i2c_acknowledge
        if i2cAck=1 then
          SSPCON2.2=1
        endif     
      endif
      if i2cMode=7 then 'end transmission 
        i2cMode=0
        T0CON.7=0       'stop timer0
        err=0
        if i2cClock=0 then pause 5 
      endif    
    endif
  wend      
return

i2c_routine_read:
  while (i2cMode>0) 
    if i2cInt=1 then   'i2c chip is ready for next instruction
      i2cInt=0  
      gosub i2cPhase1
      if i2cMode=5 then 'generate start condition
        gosub check_i2c_acknowledge
        if i2cAck=1 then      
          SSPCON2.0=1  'start
        endif  
      endif
      if i2cMode=6 then 'shift out i2c control byte
        SSPBUF=i2ccont
      endif 
      if i2cMode=7 then
        SSPCON2.3=1    'enable receiving
      endif         
      if i2cMode=8 then 'check acknowledge and receive data 
          i2cdata=SSPBUF
          i2cMode=9 
      endif
      if i2cMode=9 then 'sent stop   
        SSPCON2.2=1     
      endif
      if i2cMode=10 then 'end transmission 
        i2cMode=0
        T3CON.0=0       'stop timer3
        err=0
      endif    
    endif
  wend      
return

i2cPhase1:
  if i2cMode=1 then 'generate start condition
    SSPCON2.0=1
  endif
  if i2cMode=2  then 'shift out i2c control byte
    SSPBUF=i2ccont-i2creadbit  'when reading i2c, you first need to write
  endif
  if i2cMode=3 then 'check acknowledge and shift out i2c high address   
    if pcf8574=0 then
      gosub check_i2c_acknowledge
      if i2cAck=1 then
        SSPBUF=eep_addr.byte1 'high address
      endif
    else  'no need to sent eeprom address to a PCF8574
      i2cmode=5
    endif    
  endif
  if i2cMode=4 then 'check acknowledge and shift out i2c low address  
    if i2cClock=1 then  'Clock IC has only 8bits address
      i2cmode=5
    else
      SSPBUF=eep_addr.byte0 'low address
    endif  
  endif
return
   
End
